// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: accounting.proto

package accounting_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestGetAccountingByWalletId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RequestGetAccountingByWalletId) Reset() {
	*x = RequestGetAccountingByWalletId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetAccountingByWalletId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetAccountingByWalletId) ProtoMessage() {}

func (x *RequestGetAccountingByWalletId) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetAccountingByWalletId.ProtoReflect.Descriptor instead.
func (*RequestGetAccountingByWalletId) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{0}
}

func (x *RequestGetAccountingByWalletId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResponseGetAccountingByWalletId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error bool        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *Accounting `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32       `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Type  int32       `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Msg   string      `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ResponseGetAccountingByWalletId) Reset() {
	*x = ResponseGetAccountingByWalletId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetAccountingByWalletId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetAccountingByWalletId) ProtoMessage() {}

func (x *ResponseGetAccountingByWalletId) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetAccountingByWalletId.ProtoReflect.Descriptor instead.
func (*ResponseGetAccountingByWalletId) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseGetAccountingByWalletId) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ResponseGetAccountingByWalletId) GetData() *Accounting {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseGetAccountingByWalletId) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseGetAccountingByWalletId) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResponseGetAccountingByWalletId) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RequestCreateAccounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IdWallet string  `protobuf:"bytes,2,opt,name=idWallet,proto3" json:"idWallet,omitempty"`
	Amount   float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	IdUser   string  `protobuf:"bytes,4,opt,name=idUser,proto3" json:"idUser,omitempty"`
}

func (x *RequestCreateAccounting) Reset() {
	*x = RequestCreateAccounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCreateAccounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCreateAccounting) ProtoMessage() {}

func (x *RequestCreateAccounting) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCreateAccounting.ProtoReflect.Descriptor instead.
func (*RequestCreateAccounting) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{2}
}

func (x *RequestCreateAccounting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestCreateAccounting) GetIdWallet() string {
	if x != nil {
		return x.IdWallet
	}
	return ""
}

func (x *RequestCreateAccounting) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RequestCreateAccounting) GetIdUser() string {
	if x != nil {
		return x.IdUser
	}
	return ""
}

type ResponseCreateAccounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error bool        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *Accounting `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32       `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Type  int32       `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Msg   string      `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ResponseCreateAccounting) Reset() {
	*x = ResponseCreateAccounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCreateAccounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCreateAccounting) ProtoMessage() {}

func (x *ResponseCreateAccounting) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCreateAccounting.ProtoReflect.Descriptor instead.
func (*ResponseCreateAccounting) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseCreateAccounting) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ResponseCreateAccounting) GetData() *Accounting {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseCreateAccounting) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseCreateAccounting) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResponseCreateAccounting) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Accounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IdWallet  string  `protobuf:"bytes,2,opt,name=id_wallet,json=idWallet,proto3" json:"id_wallet,omitempty"`
	Amount    float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	IdUser    string  `protobuf:"bytes,4,opt,name=id_user,json=idUser,proto3" json:"id_user,omitempty"`
	CreatedAt string  `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string  `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Accounting) Reset() {
	*x = Accounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Accounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accounting) ProtoMessage() {}

func (x *Accounting) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accounting.ProtoReflect.Descriptor instead.
func (*Accounting) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{4}
}

func (x *Accounting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Accounting) GetIdWallet() string {
	if x != nil {
		return x.IdWallet
	}
	return ""
}

func (x *Accounting) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Accounting) GetIdUser() string {
	if x != nil {
		return x.IdUser
	}
	return ""
}

func (x *Accounting) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Accounting) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type RequestSetAmountToAccounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string  `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Amount   float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	IdUser   string  `protobuf:"bytes,3,opt,name=id_user,json=idUser,proto3" json:"id_user,omitempty"`
}

func (x *RequestSetAmountToAccounting) Reset() {
	*x = RequestSetAmountToAccounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSetAmountToAccounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSetAmountToAccounting) ProtoMessage() {}

func (x *RequestSetAmountToAccounting) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSetAmountToAccounting.ProtoReflect.Descriptor instead.
func (*RequestSetAmountToAccounting) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{5}
}

func (x *RequestSetAmountToAccounting) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *RequestSetAmountToAccounting) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RequestSetAmountToAccounting) GetIdUser() string {
	if x != nil {
		return x.IdUser
	}
	return ""
}

type ResponseSetAmountToAccounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error bool        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Data  *Accounting `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Code  int32       `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Type  int32       `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Msg   string      `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ResponseSetAmountToAccounting) Reset() {
	*x = ResponseSetAmountToAccounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSetAmountToAccounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSetAmountToAccounting) ProtoMessage() {}

func (x *ResponseSetAmountToAccounting) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSetAmountToAccounting.ProtoReflect.Descriptor instead.
func (*ResponseSetAmountToAccounting) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseSetAmountToAccounting) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ResponseSetAmountToAccounting) GetData() *Accounting {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseSetAmountToAccounting) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseSetAmountToAccounting) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ResponseSetAmountToAccounting) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_accounting_proto protoreflect.FileDescriptor

var file_accounting_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x75, 0x0a, 0x17,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6c, 0x0a,
	0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x1d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32,
	0x8c, 0x03, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x82, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x30,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x1a, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x1a, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x00, 0x12, 0x7a, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x2f, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x42, 0x14,
	0x5a, 0x12, 0x2e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accounting_proto_rawDescOnce sync.Once
	file_accounting_proto_rawDescData = file_accounting_proto_rawDesc
)

func file_accounting_proto_rawDescGZIP() []byte {
	file_accounting_proto_rawDescOnce.Do(func() {
		file_accounting_proto_rawDescData = protoimpl.X.CompressGZIP(file_accounting_proto_rawDescData)
	})
	return file_accounting_proto_rawDescData
}

var file_accounting_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_accounting_proto_goTypes = []interface{}{
	(*RequestGetAccountingByWalletId)(nil),  // 0: accounting_proto.RequestGetAccountingByWalletId
	(*ResponseGetAccountingByWalletId)(nil), // 1: accounting_proto.ResponseGetAccountingByWalletId
	(*RequestCreateAccounting)(nil),         // 2: accounting_proto.RequestCreateAccounting
	(*ResponseCreateAccounting)(nil),        // 3: accounting_proto.ResponseCreateAccounting
	(*Accounting)(nil),                      // 4: accounting_proto.Accounting
	(*RequestSetAmountToAccounting)(nil),    // 5: accounting_proto.RequestSetAmountToAccounting
	(*ResponseSetAmountToAccounting)(nil),   // 6: accounting_proto.ResponseSetAmountToAccounting
}
var file_accounting_proto_depIdxs = []int32{
	4, // 0: accounting_proto.ResponseGetAccountingByWalletId.data:type_name -> accounting_proto.Accounting
	4, // 1: accounting_proto.ResponseCreateAccounting.data:type_name -> accounting_proto.Accounting
	4, // 2: accounting_proto.ResponseSetAmountToAccounting.data:type_name -> accounting_proto.Accounting
	0, // 3: accounting_proto.accountingServicesAccounting.GetAccountingByWalletById:input_type -> accounting_proto.RequestGetAccountingByWalletId
	2, // 4: accounting_proto.accountingServicesAccounting.CreateAccounting:input_type -> accounting_proto.RequestCreateAccounting
	5, // 5: accounting_proto.accountingServicesAccounting.SetAmountToAccounting:input_type -> accounting_proto.RequestSetAmountToAccounting
	1, // 6: accounting_proto.accountingServicesAccounting.GetAccountingByWalletById:output_type -> accounting_proto.ResponseGetAccountingByWalletId
	3, // 7: accounting_proto.accountingServicesAccounting.CreateAccounting:output_type -> accounting_proto.ResponseCreateAccounting
	6, // 8: accounting_proto.accountingServicesAccounting.SetAmountToAccounting:output_type -> accounting_proto.ResponseSetAmountToAccounting
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_accounting_proto_init() }
func file_accounting_proto_init() {
	if File_accounting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_accounting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetAccountingByWalletId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetAccountingByWalletId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCreateAccounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCreateAccounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Accounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSetAmountToAccounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSetAmountToAccounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accounting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_accounting_proto_goTypes,
		DependencyIndexes: file_accounting_proto_depIdxs,
		MessageInfos:      file_accounting_proto_msgTypes,
	}.Build()
	File_accounting_proto = out.File
	file_accounting_proto_rawDesc = nil
	file_accounting_proto_goTypes = nil
	file_accounting_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccountingServicesAccountingClient is the client API for AccountingServicesAccounting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountingServicesAccountingClient interface {
	GetAccountingByWalletById(ctx context.Context, in *RequestGetAccountingByWalletId, opts ...grpc.CallOption) (*ResponseGetAccountingByWalletId, error)
	CreateAccounting(ctx context.Context, in *RequestCreateAccounting, opts ...grpc.CallOption) (*ResponseCreateAccounting, error)
	SetAmountToAccounting(ctx context.Context, in *RequestSetAmountToAccounting, opts ...grpc.CallOption) (*ResponseSetAmountToAccounting, error)
}

type accountingServicesAccountingClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServicesAccountingClient(cc grpc.ClientConnInterface) AccountingServicesAccountingClient {
	return &accountingServicesAccountingClient{cc}
}

func (c *accountingServicesAccountingClient) GetAccountingByWalletById(ctx context.Context, in *RequestGetAccountingByWalletId, opts ...grpc.CallOption) (*ResponseGetAccountingByWalletId, error) {
	out := new(ResponseGetAccountingByWalletId)
	err := c.cc.Invoke(ctx, "/accounting_proto.accountingServicesAccounting/GetAccountingByWalletById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServicesAccountingClient) CreateAccounting(ctx context.Context, in *RequestCreateAccounting, opts ...grpc.CallOption) (*ResponseCreateAccounting, error) {
	out := new(ResponseCreateAccounting)
	err := c.cc.Invoke(ctx, "/accounting_proto.accountingServicesAccounting/CreateAccounting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServicesAccountingClient) SetAmountToAccounting(ctx context.Context, in *RequestSetAmountToAccounting, opts ...grpc.CallOption) (*ResponseSetAmountToAccounting, error) {
	out := new(ResponseSetAmountToAccounting)
	err := c.cc.Invoke(ctx, "/accounting_proto.accountingServicesAccounting/SetAmountToAccounting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServicesAccountingServer is the server API for AccountingServicesAccounting service.
type AccountingServicesAccountingServer interface {
	GetAccountingByWalletById(context.Context, *RequestGetAccountingByWalletId) (*ResponseGetAccountingByWalletId, error)
	CreateAccounting(context.Context, *RequestCreateAccounting) (*ResponseCreateAccounting, error)
	SetAmountToAccounting(context.Context, *RequestSetAmountToAccounting) (*ResponseSetAmountToAccounting, error)
}

// UnimplementedAccountingServicesAccountingServer can be embedded to have forward compatible implementations.
type UnimplementedAccountingServicesAccountingServer struct {
}

func (*UnimplementedAccountingServicesAccountingServer) GetAccountingByWalletById(context.Context, *RequestGetAccountingByWalletId) (*ResponseGetAccountingByWalletId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountingByWalletById not implemented")
}
func (*UnimplementedAccountingServicesAccountingServer) CreateAccounting(context.Context, *RequestCreateAccounting) (*ResponseCreateAccounting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccounting not implemented")
}
func (*UnimplementedAccountingServicesAccountingServer) SetAmountToAccounting(context.Context, *RequestSetAmountToAccounting) (*ResponseSetAmountToAccounting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAmountToAccounting not implemented")
}

func RegisterAccountingServicesAccountingServer(s *grpc.Server, srv AccountingServicesAccountingServer) {
	s.RegisterService(&_AccountingServicesAccounting_serviceDesc, srv)
}

func _AccountingServicesAccounting_GetAccountingByWalletById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAccountingByWalletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServicesAccountingServer).GetAccountingByWalletById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.accountingServicesAccounting/GetAccountingByWalletById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServicesAccountingServer).GetAccountingByWalletById(ctx, req.(*RequestGetAccountingByWalletId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingServicesAccounting_CreateAccounting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateAccounting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServicesAccountingServer).CreateAccounting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.accountingServicesAccounting/CreateAccounting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServicesAccountingServer).CreateAccounting(ctx, req.(*RequestCreateAccounting))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingServicesAccounting_SetAmountToAccounting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetAmountToAccounting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServicesAccountingServer).SetAmountToAccounting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.accountingServicesAccounting/SetAmountToAccounting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServicesAccountingServer).SetAmountToAccounting(ctx, req.(*RequestSetAmountToAccounting))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountingServicesAccounting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accounting_proto.accountingServicesAccounting",
	HandlerType: (*AccountingServicesAccountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountingByWalletById",
			Handler:    _AccountingServicesAccounting_GetAccountingByWalletById_Handler,
		},
		{
			MethodName: "CreateAccounting",
			Handler:    _AccountingServicesAccounting_CreateAccounting_Handler,
		},
		{
			MethodName: "SetAmountToAccounting",
			Handler:    _AccountingServicesAccounting_SetAmountToAccounting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting.proto",
}
