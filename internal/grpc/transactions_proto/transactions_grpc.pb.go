// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/grpc/proto/transactions.proto

package transactions_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionsServicesClient is the client API for TransactionsServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsServicesClient interface {
	CreateTransaction(ctx context.Context, in *RequestCreateTransaction, opts ...grpc.CallOption) (*ResponseCreateTransaction, error)
	GetTransactionByID(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*ResponseGetTransactionById, error)
	GetAllTransactions(ctx context.Context, in *GetAllTransactionsRequest, opts ...grpc.CallOption) (*ResponseGetAllTransactions, error)
	GetFilesTransaction(ctx context.Context, in *GetFilesByTransactionRequest, opts ...grpc.CallOption) (*ResponseGetFilesByTransaction, error)
	GetTransactionsByBlockId(ctx context.Context, in *RqGetTransactionByBlock, opts ...grpc.CallOption) (*ResponseGetTransactionByBlock, error)
	CreateTransactionBySystem(ctx context.Context, in *RqCreateTransactionBySystem, opts ...grpc.CallOption) (*ResCreateTransactionBySystem, error)
}

type transactionsServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsServicesClient(cc grpc.ClientConnInterface) TransactionsServicesClient {
	return &transactionsServicesClient{cc}
}

func (c *transactionsServicesClient) CreateTransaction(ctx context.Context, in *RequestCreateTransaction, opts ...grpc.CallOption) (*ResponseCreateTransaction, error) {
	out := new(ResponseCreateTransaction)
	err := c.cc.Invoke(ctx, "/transactions_proto.transactionsServices/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServicesClient) GetTransactionByID(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*ResponseGetTransactionById, error) {
	out := new(ResponseGetTransactionById)
	err := c.cc.Invoke(ctx, "/transactions_proto.transactionsServices/GetTransactionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServicesClient) GetAllTransactions(ctx context.Context, in *GetAllTransactionsRequest, opts ...grpc.CallOption) (*ResponseGetAllTransactions, error) {
	out := new(ResponseGetAllTransactions)
	err := c.cc.Invoke(ctx, "/transactions_proto.transactionsServices/GetAllTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServicesClient) GetFilesTransaction(ctx context.Context, in *GetFilesByTransactionRequest, opts ...grpc.CallOption) (*ResponseGetFilesByTransaction, error) {
	out := new(ResponseGetFilesByTransaction)
	err := c.cc.Invoke(ctx, "/transactions_proto.transactionsServices/GetFilesTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServicesClient) GetTransactionsByBlockId(ctx context.Context, in *RqGetTransactionByBlock, opts ...grpc.CallOption) (*ResponseGetTransactionByBlock, error) {
	out := new(ResponseGetTransactionByBlock)
	err := c.cc.Invoke(ctx, "/transactions_proto.transactionsServices/GetTransactionsByBlockId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServicesClient) CreateTransactionBySystem(ctx context.Context, in *RqCreateTransactionBySystem, opts ...grpc.CallOption) (*ResCreateTransactionBySystem, error) {
	out := new(ResCreateTransactionBySystem)
	err := c.cc.Invoke(ctx, "/transactions_proto.transactionsServices/CreateTransactionBySystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServicesServer is the server API for TransactionsServices service.
// All implementations should embed UnimplementedTransactionsServicesServer
// for forward compatibility
type TransactionsServicesServer interface {
	CreateTransaction(context.Context, *RequestCreateTransaction) (*ResponseCreateTransaction, error)
	GetTransactionByID(context.Context, *GetTransactionByIdRequest) (*ResponseGetTransactionById, error)
	GetAllTransactions(context.Context, *GetAllTransactionsRequest) (*ResponseGetAllTransactions, error)
	GetFilesTransaction(context.Context, *GetFilesByTransactionRequest) (*ResponseGetFilesByTransaction, error)
	GetTransactionsByBlockId(context.Context, *RqGetTransactionByBlock) (*ResponseGetTransactionByBlock, error)
	CreateTransactionBySystem(context.Context, *RqCreateTransactionBySystem) (*ResCreateTransactionBySystem, error)
}

// UnimplementedTransactionsServicesServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionsServicesServer struct {
}

func (UnimplementedTransactionsServicesServer) CreateTransaction(context.Context, *RequestCreateTransaction) (*ResponseCreateTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionsServicesServer) GetTransactionByID(context.Context, *GetTransactionByIdRequest) (*ResponseGetTransactionById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByID not implemented")
}
func (UnimplementedTransactionsServicesServer) GetAllTransactions(context.Context, *GetAllTransactionsRequest) (*ResponseGetAllTransactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransactions not implemented")
}
func (UnimplementedTransactionsServicesServer) GetFilesTransaction(context.Context, *GetFilesByTransactionRequest) (*ResponseGetFilesByTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesTransaction not implemented")
}
func (UnimplementedTransactionsServicesServer) GetTransactionsByBlockId(context.Context, *RqGetTransactionByBlock) (*ResponseGetTransactionByBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByBlockId not implemented")
}
func (UnimplementedTransactionsServicesServer) CreateTransactionBySystem(context.Context, *RqCreateTransactionBySystem) (*ResCreateTransactionBySystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionBySystem not implemented")
}

// UnsafeTransactionsServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServicesServer will
// result in compilation errors.
type UnsafeTransactionsServicesServer interface {
	mustEmbedUnimplementedTransactionsServicesServer()
}

func RegisterTransactionsServicesServer(s grpc.ServiceRegistrar, srv TransactionsServicesServer) {
	s.RegisterService(&TransactionsServices_ServiceDesc, srv)
}

func _TransactionsServices_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServicesServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions_proto.transactionsServices/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServicesServer).CreateTransaction(ctx, req.(*RequestCreateTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsServices_GetTransactionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServicesServer).GetTransactionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions_proto.transactionsServices/GetTransactionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServicesServer).GetTransactionByID(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsServices_GetAllTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServicesServer).GetAllTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions_proto.transactionsServices/GetAllTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServicesServer).GetAllTransactions(ctx, req.(*GetAllTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsServices_GetFilesTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesByTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServicesServer).GetFilesTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions_proto.transactionsServices/GetFilesTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServicesServer).GetFilesTransaction(ctx, req.(*GetFilesByTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsServices_GetTransactionsByBlockId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqGetTransactionByBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServicesServer).GetTransactionsByBlockId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions_proto.transactionsServices/GetTransactionsByBlockId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServicesServer).GetTransactionsByBlockId(ctx, req.(*RqGetTransactionByBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsServices_CreateTransactionBySystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqCreateTransactionBySystem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServicesServer).CreateTransactionBySystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions_proto.transactionsServices/CreateTransactionBySystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServicesServer).CreateTransactionBySystem(ctx, req.(*RqCreateTransactionBySystem))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionsServices_ServiceDesc is the grpc.ServiceDesc for TransactionsServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionsServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactions_proto.transactionsServices",
	HandlerType: (*TransactionsServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionsServices_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByID",
			Handler:    _TransactionsServices_GetTransactionByID_Handler,
		},
		{
			MethodName: "GetAllTransactions",
			Handler:    _TransactionsServices_GetAllTransactions_Handler,
		},
		{
			MethodName: "GetFilesTransaction",
			Handler:    _TransactionsServices_GetFilesTransaction_Handler,
		},
		{
			MethodName: "GetTransactionsByBlockId",
			Handler:    _TransactionsServices_GetTransactionsByBlockId_Handler,
		},
		{
			MethodName: "CreateTransactionBySystem",
			Handler:    _TransactionsServices_CreateTransactionBySystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/proto/transactions.proto",
}
