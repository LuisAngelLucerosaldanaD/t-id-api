// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/grpc/proto/wallet.proto

package wallet_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletServicesWalletClient is the client API for WalletServicesWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServicesWalletClient interface {
	CreateWallet(ctx context.Context, in *RequestCreateWallet, opts ...grpc.CallOption) (*ResponseCreateWallet, error)
	ActivateWallet(ctx context.Context, in *RequestActivateWallet, opts ...grpc.CallOption) (*ResponseActivateWallet, error)
	GetWalletById(ctx context.Context, in *RequestGetWalletById, opts ...grpc.CallOption) (*ResponseGetWalletById, error)
	GetWalletByUserId(ctx context.Context, in *RequestGetWalletByUserId, opts ...grpc.CallOption) (*ResponseGetWalletByUserId, error)
	GetWalletByIdentityNumber(ctx context.Context, in *RqGetByIdentityNumber, opts ...grpc.CallOption) (*ResponseGetByIdentityNumber, error)
	CreateWalletBySystem(ctx context.Context, in *RqCreateWalletBySystem, opts ...grpc.CallOption) (*ResponseCreateWalletBySystem, error)
	UpdateWallet(ctx context.Context, in *RqUpdateWallet, opts ...grpc.CallOption) (*ResUpdateWallet, error)
	FrozenMoney(ctx context.Context, in *RqFrozenMoney, opts ...grpc.CallOption) (*ResFrozenMoney, error)
	UnFreezeMoney(ctx context.Context, in *RqUnFreezeMoney, opts ...grpc.CallOption) (*ResUnFreezeMoney, error)
	GetFrozenMoney(ctx context.Context, in *RqGetFrozenMoney, opts ...grpc.CallOption) (*ResGetFrozenMoney, error)
}

type walletServicesWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServicesWalletClient(cc grpc.ClientConnInterface) WalletServicesWalletClient {
	return &walletServicesWalletClient{cc}
}

func (c *walletServicesWalletClient) CreateWallet(ctx context.Context, in *RequestCreateWallet, opts ...grpc.CallOption) (*ResponseCreateWallet, error) {
	out := new(ResponseCreateWallet)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) ActivateWallet(ctx context.Context, in *RequestActivateWallet, opts ...grpc.CallOption) (*ResponseActivateWallet, error) {
	out := new(ResponseActivateWallet)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/ActivateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) GetWalletById(ctx context.Context, in *RequestGetWalletById, opts ...grpc.CallOption) (*ResponseGetWalletById, error) {
	out := new(ResponseGetWalletById)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/GetWalletById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) GetWalletByUserId(ctx context.Context, in *RequestGetWalletByUserId, opts ...grpc.CallOption) (*ResponseGetWalletByUserId, error) {
	out := new(ResponseGetWalletByUserId)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/GetWalletByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) GetWalletByIdentityNumber(ctx context.Context, in *RqGetByIdentityNumber, opts ...grpc.CallOption) (*ResponseGetByIdentityNumber, error) {
	out := new(ResponseGetByIdentityNumber)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/GetWalletByIdentityNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) CreateWalletBySystem(ctx context.Context, in *RqCreateWalletBySystem, opts ...grpc.CallOption) (*ResponseCreateWalletBySystem, error) {
	out := new(ResponseCreateWalletBySystem)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/CreateWalletBySystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) UpdateWallet(ctx context.Context, in *RqUpdateWallet, opts ...grpc.CallOption) (*ResUpdateWallet, error) {
	out := new(ResUpdateWallet)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/UpdateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) FrozenMoney(ctx context.Context, in *RqFrozenMoney, opts ...grpc.CallOption) (*ResFrozenMoney, error) {
	out := new(ResFrozenMoney)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/FrozenMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) UnFreezeMoney(ctx context.Context, in *RqUnFreezeMoney, opts ...grpc.CallOption) (*ResUnFreezeMoney, error) {
	out := new(ResUnFreezeMoney)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/UnFreezeMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServicesWalletClient) GetFrozenMoney(ctx context.Context, in *RqGetFrozenMoney, opts ...grpc.CallOption) (*ResGetFrozenMoney, error) {
	out := new(ResGetFrozenMoney)
	err := c.cc.Invoke(ctx, "/wallet_proto.walletServicesWallet/GetFrozenMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServicesWalletServer is the server API for WalletServicesWallet service.
// All implementations should embed UnimplementedWalletServicesWalletServer
// for forward compatibility
type WalletServicesWalletServer interface {
	CreateWallet(context.Context, *RequestCreateWallet) (*ResponseCreateWallet, error)
	ActivateWallet(context.Context, *RequestActivateWallet) (*ResponseActivateWallet, error)
	GetWalletById(context.Context, *RequestGetWalletById) (*ResponseGetWalletById, error)
	GetWalletByUserId(context.Context, *RequestGetWalletByUserId) (*ResponseGetWalletByUserId, error)
	GetWalletByIdentityNumber(context.Context, *RqGetByIdentityNumber) (*ResponseGetByIdentityNumber, error)
	CreateWalletBySystem(context.Context, *RqCreateWalletBySystem) (*ResponseCreateWalletBySystem, error)
	UpdateWallet(context.Context, *RqUpdateWallet) (*ResUpdateWallet, error)
	FrozenMoney(context.Context, *RqFrozenMoney) (*ResFrozenMoney, error)
	UnFreezeMoney(context.Context, *RqUnFreezeMoney) (*ResUnFreezeMoney, error)
	GetFrozenMoney(context.Context, *RqGetFrozenMoney) (*ResGetFrozenMoney, error)
}

// UnimplementedWalletServicesWalletServer should be embedded to have forward compatible implementations.
type UnimplementedWalletServicesWalletServer struct {
}

func (UnimplementedWalletServicesWalletServer) CreateWallet(context.Context, *RequestCreateWallet) (*ResponseCreateWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServicesWalletServer) ActivateWallet(context.Context, *RequestActivateWallet) (*ResponseActivateWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateWallet not implemented")
}
func (UnimplementedWalletServicesWalletServer) GetWalletById(context.Context, *RequestGetWalletById) (*ResponseGetWalletById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletById not implemented")
}
func (UnimplementedWalletServicesWalletServer) GetWalletByUserId(context.Context, *RequestGetWalletByUserId) (*ResponseGetWalletByUserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByUserId not implemented")
}
func (UnimplementedWalletServicesWalletServer) GetWalletByIdentityNumber(context.Context, *RqGetByIdentityNumber) (*ResponseGetByIdentityNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByIdentityNumber not implemented")
}
func (UnimplementedWalletServicesWalletServer) CreateWalletBySystem(context.Context, *RqCreateWalletBySystem) (*ResponseCreateWalletBySystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWalletBySystem not implemented")
}
func (UnimplementedWalletServicesWalletServer) UpdateWallet(context.Context, *RqUpdateWallet) (*ResUpdateWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedWalletServicesWalletServer) FrozenMoney(context.Context, *RqFrozenMoney) (*ResFrozenMoney, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenMoney not implemented")
}
func (UnimplementedWalletServicesWalletServer) UnFreezeMoney(context.Context, *RqUnFreezeMoney) (*ResUnFreezeMoney, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFreezeMoney not implemented")
}
func (UnimplementedWalletServicesWalletServer) GetFrozenMoney(context.Context, *RqGetFrozenMoney) (*ResGetFrozenMoney, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrozenMoney not implemented")
}

// UnsafeWalletServicesWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServicesWalletServer will
// result in compilation errors.
type UnsafeWalletServicesWalletServer interface {
	mustEmbedUnimplementedWalletServicesWalletServer()
}

func RegisterWalletServicesWalletServer(s grpc.ServiceRegistrar, srv WalletServicesWalletServer) {
	s.RegisterService(&WalletServicesWallet_ServiceDesc, srv)
}

func _WalletServicesWallet_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateWallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).CreateWallet(ctx, req.(*RequestCreateWallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_ActivateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestActivateWallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).ActivateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/ActivateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).ActivateWallet(ctx, req.(*RequestActivateWallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_GetWalletById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetWalletById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).GetWalletById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/GetWalletById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).GetWalletById(ctx, req.(*RequestGetWalletById))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_GetWalletByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetWalletByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).GetWalletByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/GetWalletByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).GetWalletByUserId(ctx, req.(*RequestGetWalletByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_GetWalletByIdentityNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqGetByIdentityNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).GetWalletByIdentityNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/GetWalletByIdentityNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).GetWalletByIdentityNumber(ctx, req.(*RqGetByIdentityNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_CreateWalletBySystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqCreateWalletBySystem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).CreateWalletBySystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/CreateWalletBySystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).CreateWalletBySystem(ctx, req.(*RqCreateWalletBySystem))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqUpdateWallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/UpdateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).UpdateWallet(ctx, req.(*RqUpdateWallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_FrozenMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqFrozenMoney)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).FrozenMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/FrozenMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).FrozenMoney(ctx, req.(*RqFrozenMoney))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_UnFreezeMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqUnFreezeMoney)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).UnFreezeMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/UnFreezeMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).UnFreezeMoney(ctx, req.(*RqUnFreezeMoney))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletServicesWallet_GetFrozenMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqGetFrozenMoney)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServicesWalletServer).GetFrozenMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_proto.walletServicesWallet/GetFrozenMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServicesWalletServer).GetFrozenMoney(ctx, req.(*RqGetFrozenMoney))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletServicesWallet_ServiceDesc is the grpc.ServiceDesc for WalletServicesWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletServicesWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet_proto.walletServicesWallet",
	HandlerType: (*WalletServicesWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _WalletServicesWallet_CreateWallet_Handler,
		},
		{
			MethodName: "ActivateWallet",
			Handler:    _WalletServicesWallet_ActivateWallet_Handler,
		},
		{
			MethodName: "GetWalletById",
			Handler:    _WalletServicesWallet_GetWalletById_Handler,
		},
		{
			MethodName: "GetWalletByUserId",
			Handler:    _WalletServicesWallet_GetWalletByUserId_Handler,
		},
		{
			MethodName: "GetWalletByIdentityNumber",
			Handler:    _WalletServicesWallet_GetWalletByIdentityNumber_Handler,
		},
		{
			MethodName: "CreateWalletBySystem",
			Handler:    _WalletServicesWallet_CreateWalletBySystem_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _WalletServicesWallet_UpdateWallet_Handler,
		},
		{
			MethodName: "FrozenMoney",
			Handler:    _WalletServicesWallet_FrozenMoney_Handler,
		},
		{
			MethodName: "UnFreezeMoney",
			Handler:    _WalletServicesWallet_UnFreezeMoney_Handler,
		},
		{
			MethodName: "GetFrozenMoney",
			Handler:    _WalletServicesWallet_GetFrozenMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/proto/wallet.proto",
}
