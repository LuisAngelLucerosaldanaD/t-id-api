// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: api/grpc/proto/mine.proto

package mine_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MineBlockServicesBlocksClient is the client API for MineBlockServicesBlocks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MineBlockServicesBlocksClient interface {
	GetBlockToMine(ctx context.Context, in *GetBlockToMineRequest, opts ...grpc.CallOption) (*GetBlockToMineResponse, error)
	MineBlock(ctx context.Context, in *RequestMineBlock, opts ...grpc.CallOption) (*MineBlockResponse, error)
	GenerateBlockGenesis(ctx context.Context, in *RequestGenerateGenesis, opts ...grpc.CallOption) (*ResponseGenerateGenesis, error)
}

type mineBlockServicesBlocksClient struct {
	cc grpc.ClientConnInterface
}

func NewMineBlockServicesBlocksClient(cc grpc.ClientConnInterface) MineBlockServicesBlocksClient {
	return &mineBlockServicesBlocksClient{cc}
}

func (c *mineBlockServicesBlocksClient) GetBlockToMine(ctx context.Context, in *GetBlockToMineRequest, opts ...grpc.CallOption) (*GetBlockToMineResponse, error) {
	out := new(GetBlockToMineResponse)
	err := c.cc.Invoke(ctx, "/mine_proto.mineBlockServicesBlocks/GetBlockToMine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mineBlockServicesBlocksClient) MineBlock(ctx context.Context, in *RequestMineBlock, opts ...grpc.CallOption) (*MineBlockResponse, error) {
	out := new(MineBlockResponse)
	err := c.cc.Invoke(ctx, "/mine_proto.mineBlockServicesBlocks/MineBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mineBlockServicesBlocksClient) GenerateBlockGenesis(ctx context.Context, in *RequestGenerateGenesis, opts ...grpc.CallOption) (*ResponseGenerateGenesis, error) {
	out := new(ResponseGenerateGenesis)
	err := c.cc.Invoke(ctx, "/mine_proto.mineBlockServicesBlocks/GenerateBlockGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MineBlockServicesBlocksServer is the server API for MineBlockServicesBlocks service.
// All implementations should embed UnimplementedMineBlockServicesBlocksServer
// for forward compatibility
type MineBlockServicesBlocksServer interface {
	GetBlockToMine(context.Context, *GetBlockToMineRequest) (*GetBlockToMineResponse, error)
	MineBlock(context.Context, *RequestMineBlock) (*MineBlockResponse, error)
	GenerateBlockGenesis(context.Context, *RequestGenerateGenesis) (*ResponseGenerateGenesis, error)
}

// UnimplementedMineBlockServicesBlocksServer should be embedded to have forward compatible implementations.
type UnimplementedMineBlockServicesBlocksServer struct {
}

func (UnimplementedMineBlockServicesBlocksServer) GetBlockToMine(context.Context, *GetBlockToMineRequest) (*GetBlockToMineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockToMine not implemented")
}
func (UnimplementedMineBlockServicesBlocksServer) MineBlock(context.Context, *RequestMineBlock) (*MineBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineBlock not implemented")
}
func (UnimplementedMineBlockServicesBlocksServer) GenerateBlockGenesis(context.Context, *RequestGenerateGenesis) (*ResponseGenerateGenesis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBlockGenesis not implemented")
}

// UnsafeMineBlockServicesBlocksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MineBlockServicesBlocksServer will
// result in compilation errors.
type UnsafeMineBlockServicesBlocksServer interface {
	mustEmbedUnimplementedMineBlockServicesBlocksServer()
}

func RegisterMineBlockServicesBlocksServer(s grpc.ServiceRegistrar, srv MineBlockServicesBlocksServer) {
	s.RegisterService(&MineBlockServicesBlocks_ServiceDesc, srv)
}

func _MineBlockServicesBlocks_GetBlockToMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockToMineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineBlockServicesBlocksServer).GetBlockToMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mine_proto.mineBlockServicesBlocks/GetBlockToMine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineBlockServicesBlocksServer).GetBlockToMine(ctx, req.(*GetBlockToMineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MineBlockServicesBlocks_MineBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMineBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineBlockServicesBlocksServer).MineBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mine_proto.mineBlockServicesBlocks/MineBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineBlockServicesBlocksServer).MineBlock(ctx, req.(*RequestMineBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _MineBlockServicesBlocks_GenerateBlockGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGenerateGenesis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineBlockServicesBlocksServer).GenerateBlockGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mine_proto.mineBlockServicesBlocks/GenerateBlockGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineBlockServicesBlocksServer).GenerateBlockGenesis(ctx, req.(*RequestGenerateGenesis))
	}
	return interceptor(ctx, in, info, handler)
}

// MineBlockServicesBlocks_ServiceDesc is the grpc.ServiceDesc for MineBlockServicesBlocks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MineBlockServicesBlocks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mine_proto.mineBlockServicesBlocks",
	HandlerType: (*MineBlockServicesBlocksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockToMine",
			Handler:    _MineBlockServicesBlocks_GetBlockToMine_Handler,
		},
		{
			MethodName: "MineBlock",
			Handler:    _MineBlockServicesBlocks_MineBlock_Handler,
		},
		{
			MethodName: "GenerateBlockGenesis",
			Handler:    _MineBlockServicesBlocks_GenerateBlockGenesis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/proto/mine.proto",
}
